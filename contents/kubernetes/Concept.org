#+TITLE: 쿠버네티스 개념

* 오브젝트
- 쿠버네티스의 가장 중요한 부분

** 오브젝트 스펙
yaml 혹은 json 파일로 정의되는 오브젝트 특성 정보

** 기본 오브젝트
컨테이너화 되어 배포 및 관리되는 가장 기본적인 단위이다.
Pod, Volume, Service, Namespace 4가지가 있다.

*** Pod
- 쿠버네티스의 기본 배포 단위로 컨테이너를 포함한다.
- 쿠버네티스는 Pod 단위로 배포되며, Pod는 하나 이상의 컨테이너를 포함한다.
- Pod 내 컨테이너는 IP와 포트를 공유한다.
- Pod 내 컨테이너는 디스크를 공유할 수 있다.

*** Volume
- Pod 를 실행하면 컨테이너 전용 디스크가 생성되는데, 컨테이너가 중지되거나 재시작되면 디스크 기록이 유실된다.
- 따라서 데이터베이스 처럼 영구적으로 데이터 저장이 필요할 경우 사용된다.
- Pod 내 컨테이너간 공유가 가능하다.
- iSCSI NFS, AWS EBS, Google PD, github, glusterfs 같은 외장 스토리지 서비스를 지너한다.

*** Service
- Pod와 Volume을 이용해서 하나 이상의 Pod를 하나의 IP와 포트로 묶어서 서비스를 제공한다.
- 로드밸런서가 동적으로 생성되는 Pod의 IP 주소를 이용하는 것은 어려우므로 Label과 Label selector라는 개념을 사용해 유연하게 IP 주소를 사용할 수 있도록 만든다.

*** Namespace
- 네임스페이스는 하나의 쿠버네티스 클러스터 내의 논리적인 분리 단위 이다.
- Pod와 Service가 네임스페이스 단위로 분리될 수 있고, 권한 역시 나눠서 부여가 가능하다.
- Namespace 별로 접근 권한을 다르게 운영할 수 있다.
- 리소스의 할당량을 지정할 수 있다.
- 네임 스페이스는 논리적인 분리 단위일 뿐 물리적인 환경을 분리한 것이 아니므로 다른 네임스페이스간 Pod 끼리 통신이 가능하다.
- 높은 수준의 분리 정책을 원할 경우 쿠버네티스 클러스터 자체를 분리하는 것이 좋다.

** 라벨
- 라벨은 쿠버네티스의 리소스를 선택하는데 사용된다.
- 라벨은 metadata 섹션에 키/값 쌍으로 정의가 가능하다.
- 하나의 리소스에는 하나 이상의 라벨을 동시에 적용할 수 있다.

** 컨트롤러
- 기본 오브젝트(Pod, Volume, Service, Namespace)의 설정 및 배포를 관리하기 편하도록 도와준다.
- Replication Controller(RC), ReplicaSet, DaemonSet, Job, StatefulSet, Deployment 등이 있다.

*** Replication Controller(RC)
- Pod를 관리해주는 역할을 한다.
- 지정된 숫자만큼 Pod를 가동시키고 관리를 한다.
- Replica의 수, Pod Selector, Pod Template 3가지로 구성된다.
- Pod selector : 라벨을 기반으로 하여 RC가 관리하는 Pod를 가지고 오는데 사용된다.
- Replica 수 : RC에 의해서 관리되는 Pod의 수이다. 해당하는 수 만큼의 Pod를 유지한다.
- Pod template : Pod에 생성 정보(도커 이미지, 포트, 라벨 등)에 대한 정보를 정의한다.

*** ReplicaSet
- Replication Controller의 새 버전이다.
- RC는 Equality 기반 Selector를 이용하지만, Replica Set은 Set 기반의 Selector를 이용한다.

*** Deployment
- Replication Controller와 Replica Set의 상위 개념이다.
- 실제 운영에서는 좀 더 추상화된 Deployment를 사용한다.

*** DaemonSet
- 각 노드에서 Pod 가 하나씩만 돌게하는 형태로 Pod를 관리한다.
- RC나 RS에 의해서 관리되는 Pod는 노드의 상황에 따라 비균등적으로 배포되지만, DS로 관리되는 Pod는 모든 노드에 균등하게 하나씩 배포된다.
- 주로 서버의 모니터링이나 로그 수집 용도로 많이 사용된다.
- Pod의 node selector를 이용해서 특정 노드들에서 하나씩 배포되도록 설정이 가능하다.

*** Job
- 한번 실행되고 끝나는 작업을 하는 경우, 작업이 실행될 때만 Pod를 띄운다.
- Job으로 관리되는 Pod의 경우 Job이 종료되면 Pod를 같이 종료한다.
- Job은 컨테이너에서 수행하기 위한 커맨드를 입력하고, 프로세스 exit 코드로 성공 및 실패 여부를 판단한다.
- Job을 순차적으로 실행하거나 병렬로 처리하도록 설정할 수 있다.

*** Cron jobs
- 주기적인 스케줄에 따라 Job 컨트롤러에 의해 실행해준다.
- schedule 항목을 unix crontab 과 같이 설정해주면 된다.

*** StatefulSet
- 데이터베이스와 같은 상태를 가지는 Pod를 관리하기 위해서 사용된다.

* 참고
- [[http://bcho.tistory.com/1256?category=731548]]
- [[http://bcho.tistory.com/1257?category=731548]]
